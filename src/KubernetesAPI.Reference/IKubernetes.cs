// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kubeleans.KubernetesApi
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IKubernetes : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// get available API versions
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIVersions>> GetCoreAPIVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetCoreV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ComponentStatus
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ComponentStatusList>> ListCoreV1ComponentStatusWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ComponentStatus
        /// </summary>
        /// <param name='name'>
        /// name of the ComponentStatus
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ComponentStatus>> ReadCoreV1ComponentStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMapList>> ListCoreV1ConfigMapForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EndpointsList>> ListCoreV1EndpointsForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EventList>> ListCoreV1EventForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRangeList>> ListCoreV1LimitRangeForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Namespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1NamespaceList>> ListCoreV1NamespaceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> CreateCoreV1NamespaceWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Binding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Binding>> CreateCoreV1NamespacedBindingWithHttpMessagesAsync(Iok8sapicorev1Binding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMapList>> ListCoreV1NamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> CreateCoreV1NamespacedConfigMapWithHttpMessagesAsync(Iok8sapicorev1ConfigMap body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ConfigMap
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ConfigMap
        /// </summary>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> ReadCoreV1NamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> ReplaceCoreV1NamespacedConfigMapWithHttpMessagesAsync(Iok8sapicorev1ConfigMap body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedConfigMapWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> PatchCoreV1NamespacedConfigMapWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EndpointsList>> ListCoreV1NamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> CreateCoreV1NamespacedEndpointsWithHttpMessagesAsync(Iok8sapicorev1Endpoints body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Endpoints
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Endpoints
        /// </summary>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> ReadCoreV1NamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> ReplaceCoreV1NamespacedEndpointsWithHttpMessagesAsync(Iok8sapicorev1Endpoints body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedEndpointsWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> PatchCoreV1NamespacedEndpointsWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EventList>> ListCoreV1NamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> CreateCoreV1NamespacedEventWithHttpMessagesAsync(Iok8sapicorev1Event body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> ReadCoreV1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> ReplaceCoreV1NamespacedEventWithHttpMessagesAsync(Iok8sapicorev1Event body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedEventWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> PatchCoreV1NamespacedEventWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRangeList>> ListCoreV1NamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> CreateCoreV1NamespacedLimitRangeWithHttpMessagesAsync(Iok8sapicorev1LimitRange body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of LimitRange
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified LimitRange
        /// </summary>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> ReadCoreV1NamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> ReplaceCoreV1NamespacedLimitRangeWithHttpMessagesAsync(Iok8sapicorev1LimitRange body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedLimitRangeWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> PatchCoreV1NamespacedLimitRangeWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaimList>> ListCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> CreateCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PersistentVolumeClaim
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReadCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReplaceCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> PatchCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReadCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReplaceCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> PatchCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodList>> ListCoreV1NamespacedPodWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> CreateCoreV1NamespacedPodWithHttpMessagesAsync(Iok8sapicorev1Pod body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Pod
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedPodWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReadCoreV1NamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReplaceCoreV1NamespacedPodWithHttpMessagesAsync(Iok8sapicorev1Pod body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedPodWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> PatchCoreV1NamespacedPodWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to attach of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Stderr if true indicates that stderr is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Stdin if true, redirects the standard input stream of the pod for
        /// this call. Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Stdout if true indicates that stdout is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the attach
        /// call. This is passed through the container runtime so the tty is
        /// allocated on the worker node by the container runtime. Defaults to
        /// false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to attach of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Stderr if true indicates that stderr is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Stdin if true, redirects the standard input stream of the pod for
        /// this call. Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Stdout if true indicates that stdout is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the attach
        /// call. This is passed through the container runtime so the tty is
        /// allocated on the worker node by the container runtime. Defaults to
        /// false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create binding of a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Binding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Binding>> CreateCoreV1NamespacedPodBindingWithHttpMessagesAsync(Iok8sapicorev1Binding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create eviction of a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Eviction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1Eviction>> CreateCoreV1NamespacedPodEvictionWithHttpMessagesAsync(Iok8sapipolicyv1beta1Eviction body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to exec of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='command'>
        /// Command is the remote command to execute. argv array. Not executed
        /// within a shell.
        /// </param>
        /// <param name='container'>
        /// Container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Redirect the standard error stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Redirect the standard input stream of the pod for this call.
        /// Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Redirect the standard output stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the exec
        /// call. Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to exec of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='command'>
        /// Command is the remote command to execute. argv array. Not executed
        /// within a shell.
        /// </param>
        /// <param name='container'>
        /// Container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Redirect the standard error stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Redirect the standard input stream of the pod for this call.
        /// Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Redirect the standard output stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the exec
        /// call. Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read log of the specified Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container for which to stream logs. Defaults to only container
        /// if there is one container in the pod.
        /// </param>
        /// <param name='follow'>
        /// Follow the log stream of the pod. Defaults to false.
        /// </param>
        /// <param name='limitBytes'>
        /// If set, the number of bytes to read from the server before
        /// terminating the log output. This may not display a complete final
        /// line of logging, and may return slightly more or slightly less than
        /// the specified limit.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='previous'>
        /// Return previous terminated container logs. Defaults to false.
        /// </param>
        /// <param name='sinceSeconds'>
        /// A relative time in seconds before the current time from which to
        /// show logs. If this value precedes the time a pod was started, only
        /// logs since the pod start will be returned. If this value is in the
        /// future, no logs will be returned. Only one of sinceSeconds or
        /// sinceTime may be specified.
        /// </param>
        /// <param name='tailLines'>
        /// If set, the number of lines from the end of the logs to show. If
        /// not specified, logs are shown from the creation of the container or
        /// sinceSeconds or sinceTime
        /// </param>
        /// <param name='timestamps'>
        /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning
        /// of every line of log output. Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ReadCoreV1NamespacedPodLogWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to portforward of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='ports'>
        /// List of ports to forward Required when using WebSockets
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, int? ports = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to portforward of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='ports'>
        /// List of ports to forward Required when using WebSockets
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, int? ports = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReadCoreV1NamespacedPodStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReplaceCoreV1NamespacedPodStatusWithHttpMessagesAsync(Iok8sapicorev1Pod body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> PatchCoreV1NamespacedPodStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplateList>> ListCoreV1NamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> CreateCoreV1NamespacedPodTemplateWithHttpMessagesAsync(Iok8sapicorev1PodTemplate body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodTemplate
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodTemplate
        /// </summary>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> ReadCoreV1NamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> ReplaceCoreV1NamespacedPodTemplateWithHttpMessagesAsync(Iok8sapicorev1PodTemplate body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedPodTemplateWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> PatchCoreV1NamespacedPodTemplateWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationControllerList>> ListCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> CreateCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicationController
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReadCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReplaceCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> PatchCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReadCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReplaceCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> PatchCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuotaList>> ListCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> CreateCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReadCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReplaceCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> PatchCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReadCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReplaceCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> PatchCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1SecretList>> ListCoreV1NamespacedSecretWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> CreateCoreV1NamespacedSecretWithHttpMessagesAsync(Iok8sapicorev1Secret body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Secret
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedSecretWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Secret
        /// </summary>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> ReadCoreV1NamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> ReplaceCoreV1NamespacedSecretWithHttpMessagesAsync(Iok8sapicorev1Secret body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedSecretWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> PatchCoreV1NamespacedSecretWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccountList>> ListCoreV1NamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> CreateCoreV1NamespacedServiceAccountWithHttpMessagesAsync(Iok8sapicorev1ServiceAccount body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ServiceAccount
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ServiceAccount
        /// </summary>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> ReadCoreV1NamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> ReplaceCoreV1NamespacedServiceAccountWithHttpMessagesAsync(Iok8sapicorev1ServiceAccount body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedServiceAccountWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> PatchCoreV1NamespacedServiceAccountWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceList>> ListCoreV1NamespacedServiceWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> CreateCoreV1NamespacedServiceWithHttpMessagesAsync(Iok8sapicorev1Service body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReadCoreV1NamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReplaceCoreV1NamespacedServiceWithHttpMessagesAsync(Iok8sapicorev1Service body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedServiceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> PatchCoreV1NamespacedServiceWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service. For
        /// example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReadCoreV1NamespacedServiceStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReplaceCoreV1NamespacedServiceStatusWithHttpMessagesAsync(Iok8sapicorev1Service body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> PatchCoreV1NamespacedServiceStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Namespace
        /// </summary>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReadCoreV1NamespaceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReplaceCoreV1NamespaceWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespaceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> PatchCoreV1NamespaceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace finalize of the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReplaceCoreV1NamespaceFinalizeWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Namespace
        /// </summary>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReadCoreV1NamespaceStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReplaceCoreV1NamespaceStatusWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> PatchCoreV1NamespaceStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Node
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1NodeList>> ListCoreV1NodeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> CreateCoreV1NodeWithHttpMessagesAsync(Iok8sapicorev1Node body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Node
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNodeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReadCoreV1NodeWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReplaceCoreV1NodeWithHttpMessagesAsync(Iok8sapicorev1Node body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NodeWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> PatchCoreV1NodeWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReadCoreV1NodeStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReplaceCoreV1NodeStatusWithHttpMessagesAsync(Iok8sapicorev1Node body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> PatchCoreV1NodeStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaimList>> ListCoreV1PersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PersistentVolume
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeList>> ListCoreV1PersistentVolumeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> CreateCoreV1PersistentVolumeWithHttpMessagesAsync(Iok8sapicorev1PersistentVolume body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PersistentVolume
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionPersistentVolumeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PersistentVolume
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReadCoreV1PersistentVolumeWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReplaceCoreV1PersistentVolumeWithHttpMessagesAsync(Iok8sapicorev1PersistentVolume body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1PersistentVolumeWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> PatchCoreV1PersistentVolumeWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified PersistentVolume
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReadCoreV1PersistentVolumeStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReplaceCoreV1PersistentVolumeStatusWithHttpMessagesAsync(Iok8sapicorev1PersistentVolume body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> PatchCoreV1PersistentVolumeStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodList>> ListCoreV1PodForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplateList>> ListCoreV1PodTemplateForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationControllerList>> ListCoreV1ReplicationControllerForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuotaList>> ListCoreV1ResourceQuotaForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1SecretList>> ListCoreV1SecretForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccountList>> ListCoreV1ServiceAccountForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceList>> ListCoreV1ServiceForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ConfigMapListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1EndpointsListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1EventListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1LimitRangeListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Namespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespaceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedConfigMapListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ConfigMap
        /// </summary>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEndpointsListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Endpoints
        /// </summary>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEventListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedLimitRangeListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind LimitRange
        /// </summary>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPersistentVolumeClaimListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodTemplateListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodTemplate
        /// </summary>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedReplicationControllerListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedResourceQuotaListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedSecretListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Secret
        /// </summary>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceAccountListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ServiceAccount
        /// </summary>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Namespace
        /// </summary>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespaceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Node
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NodeListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NodeWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PersistentVolumeClaimListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PersistentVolume
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PersistentVolumeListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PersistentVolume
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PersistentVolumeWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PodListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PodTemplateListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ReplicationControllerListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ResourceQuotaListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1SecretListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ServiceAccountListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ServiceListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available API versions
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroupList>> GetAPIVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAdmissionregistrationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAdmissionregistrationV1alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind InitializerConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1alpha1InitializerConfigurationList>> ListAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an InitializerConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration>> CreateAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of InitializerConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1alpha1CollectionInitializerConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified InitializerConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the InitializerConfiguration
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration>> ReadAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified InitializerConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the InitializerConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration>> ReplaceAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an InitializerConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the InitializerConfiguration
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified InitializerConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the InitializerConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration>> PatchAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of InitializerConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1alpha1InitializerConfigurationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind InitializerConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the InitializerConfiguration
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAdmissionregistrationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind MutatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfigurationList>> ListAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of MutatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified MutatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfigurationList>> ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of MutatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind MutatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of
        /// ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetApiextensionsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetApiextensionsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CustomResourceDefinition
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinitionList>> ListApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CustomResourceDefinition
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition>> CreateApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CustomResourceDefinition
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CustomResourceDefinition
        /// </summary>
        /// <param name='name'>
        /// name of the CustomResourceDefinition
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition>> ReadApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CustomResourceDefinition
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CustomResourceDefinition
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition>> ReplaceApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CustomResourceDefinition
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CustomResourceDefinition
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CustomResourceDefinition
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CustomResourceDefinition
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition>> PatchApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CustomResourceDefinition
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CustomResourceDefinition
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition>> ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusWithHttpMessagesAsync(Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CustomResourceDefinition
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiextensionsV1beta1CustomResourceDefinitionListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CustomResourceDefinition
        /// </summary>
        /// <param name='name'>
        /// name of the CustomResourceDefinition
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetApiregistrationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetApiregistrationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList>> ListApiregistrationV1APIServiceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1APIService>> CreateApiregistrationV1APIServiceWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1APIService body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiregistrationV1CollectionAPIServiceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified APIService
        /// </summary>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1APIService>> ReadApiregistrationV1APIServiceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1APIService>> ReplaceApiregistrationV1APIServiceWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1APIService body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiregistrationV1APIServiceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1APIService>> PatchApiregistrationV1APIServiceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1APIService>> ReplaceApiregistrationV1APIServiceStatusWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1APIService body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiregistrationV1APIServiceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind APIService
        /// </summary>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiregistrationV1APIServiceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetApiregistrationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList>> ListApiregistrationV1beta1APIServiceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> CreateApiregistrationV1beta1APIServiceWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiregistrationV1beta1CollectionAPIServiceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified APIService
        /// </summary>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> ReadApiregistrationV1beta1APIServiceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> ReplaceApiregistrationV1beta1APIServiceWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiregistrationV1beta1APIServiceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> PatchApiregistrationV1beta1APIServiceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> ReplaceApiregistrationV1beta1APIServiceStatusWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiregistrationV1beta1APIServiceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind APIService
        /// </summary>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiregistrationV1beta1APIServiceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAppsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevisionList>> ListAppsV1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSetList>> ListAppsV1DaemonSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DeploymentList>> ListAppsV1DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevisionList>> ListAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> CreateAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1ControllerRevision body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> ReadAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> ReplaceAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> PatchAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSetList>> ListAppsV1NamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> CreateAppsV1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReadAppsV1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReplaceAppsV1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> PatchAppsV1NamespacedDaemonSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReadAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReplaceAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> PatchAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DeploymentList>> ListAppsV1NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> CreateAppsV1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReadAppsV1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReplaceAppsV1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> PatchAppsV1NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReadAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReplaceAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> PatchAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSetList>> ListAppsV1NamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> CreateAppsV1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReadAppsV1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReplaceAppsV1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> PatchAppsV1NamespacedReplicaSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReadAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReplaceAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> PatchAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSetList>> ListAppsV1NamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> CreateAppsV1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReadAppsV1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReplaceAppsV1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> PatchAppsV1NamespacedStatefulSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReadAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReplaceAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> PatchAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSetList>> ListAppsV1ReplicaSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSetList>> ListAppsV1StatefulSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1DaemonSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedControllerRevisionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDaemonSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedReplicaSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedStatefulSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1ReplicaSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1StatefulSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevisionList>> ListAppsV1beta1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1DeploymentList>> ListAppsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevisionList>> ListAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> CreateAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta1ControllerRevision body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1CollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> ReadAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> ReplaceAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta1ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> PatchAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1DeploymentList>> ListAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> CreateAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReadAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReplaceAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> PatchAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create rollback of a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentRollback
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1DeploymentRollback>> CreateAppsV1beta1NamespacedDeploymentRollbackWithHttpMessagesAsync(Iok8sapiappsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReadAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReplaceAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiappsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> PatchAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReadAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReplaceAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> PatchAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSetList>> ListAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> CreateAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1CollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReadAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReplaceAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> PatchAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReadAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReplaceAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(Iok8sapiappsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> PatchAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReadAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReplaceAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> PatchAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSetList>> ListAppsV1beta1StatefulSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedControllerRevisionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedStatefulSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1StatefulSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsV1beta2APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevisionList>> ListAppsV1beta2ControllerRevisionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSetList>> ListAppsV1beta2DaemonSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DeploymentList>> ListAppsV1beta2DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevisionList>> ListAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> CreateAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta2ControllerRevision body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> ReadAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> ReplaceAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta2ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> PatchAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSetList>> ListAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> CreateAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReadAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReplaceAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> PatchAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReadAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReplaceAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> PatchAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DeploymentList>> ListAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> CreateAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReadAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReplaceAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> PatchAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReadAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReplaceAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> PatchAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReadAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReplaceAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> PatchAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSetList>> ListAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> CreateAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReadAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReplaceAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> PatchAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReadAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReplaceAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> PatchAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReadAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReplaceAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> PatchAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSetList>> ListAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> CreateAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReadAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReplaceAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> PatchAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReadAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReplaceAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> PatchAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReadAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReplaceAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> PatchAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSetList>> ListAppsV1beta2ReplicaSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSetList>> ListAppsV1beta2StatefulSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2DaemonSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedControllerRevisionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDaemonSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedReplicaSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedStatefulSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2ReplicaSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2StatefulSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAuthenticationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthenticationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a TokenReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthenticationv1TokenReview>> CreateAuthenticationV1TokenReviewWithHttpMessagesAsync(Iok8sapiauthenticationv1TokenReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthenticationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a TokenReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthenticationv1beta1TokenReview>> CreateAuthenticationV1beta1TokenReviewWithHttpMessagesAsync(Iok8sapiauthenticationv1beta1TokenReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAuthorizationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthorizationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1LocalSubjectAccessReview>> CreateAuthorizationV1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1SelfSubjectAccessReview>> CreateAuthorizationV1SelfSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1SelfSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1SelfSubjectRulesReview>> CreateAuthorizationV1SelfSubjectRulesReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1SelfSubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1SubjectAccessReview>> CreateAuthorizationV1SubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1SubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthorizationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1LocalSubjectAccessReview>> CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1SelfSubjectAccessReview>> CreateAuthorizationV1beta1SelfSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1SelfSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1SelfSubjectRulesReview>> CreateAuthorizationV1beta1SelfSubjectRulesReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1SelfSubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1SubjectAccessReview>> CreateAuthorizationV1beta1SubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1SubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAutoscalingAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAutoscalingV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscalerList>> ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscalerList>> ListAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> CreateAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReadAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> PatchAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAutoscalingV2beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerList>> ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerList>> ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetBatchAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBatchV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1JobList>> ListBatchV1JobForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1JobList>> ListBatchV1NamespacedJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> CreateBatchV1NamespacedJobWithHttpMessagesAsync(Iok8sapibatchv1Job body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Job
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1CollectionNamespacedJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Job
        /// </summary>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReadBatchV1NamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReplaceBatchV1NamespacedJobWithHttpMessagesAsync(Iok8sapibatchv1Job body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1NamespacedJobWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> PatchBatchV1NamespacedJobWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Job
        /// </summary>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReadBatchV1NamespacedJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReplaceBatchV1NamespacedJobStatusWithHttpMessagesAsync(Iok8sapibatchv1Job body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> PatchBatchV1NamespacedJobStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1JobListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1NamespacedJobListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Job
        /// </summary>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1NamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBatchV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJobList>> ListBatchV1beta1CronJobForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJobList>> ListBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> CreateBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1beta1CollectionNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReadBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReplaceBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> PatchBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReadBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReplaceBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> PatchBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1beta1CronJobListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1beta1NamespacedCronJobListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBatchV2alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJobList>> ListBatchV2alpha1CronJobForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJobList>> ListBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> CreateBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV2alpha1CollectionNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReadBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReplaceBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> PatchBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReadBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReplaceBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> PatchBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV2alpha1CronJobListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV2alpha1NamespacedCronJobListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetCertificatesAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetCertificatesV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CertificateSigningRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequestList>> ListCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> CreateCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CertificateSigningRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCertificatesV1beta1CollectionCertificateSigningRequestWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CertificateSigningRequest
        /// </summary>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReadCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReplaceCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> PatchCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace approval of the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReplaceCertificatesV1beta1CertificateSigningRequestApprovalWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReplaceCertificatesV1beta1CertificateSigningRequestStatusWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CertificateSigningRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCertificatesV1beta1CertificateSigningRequestListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CertificateSigningRequest
        /// </summary>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetEventsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetEventsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1EventList>> ListEventsV1beta1EventForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1EventList>> ListEventsV1beta1NamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> CreateEventsV1beta1NamespacedEventWithHttpMessagesAsync(Iok8sapieventsv1beta1Event body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteEventsV1beta1CollectionNamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> ReadEventsV1beta1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> ReplaceEventsV1beta1NamespacedEventWithHttpMessagesAsync(Iok8sapieventsv1beta1Event body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteEventsV1beta1NamespacedEventWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> PatchEventsV1beta1NamespacedEventWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEventsV1beta1EventListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEventsV1beta1NamespacedEventListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEventsV1beta1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetExtensionsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetExtensionsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSetList>> ListExtensionsV1beta1DaemonSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DeploymentList>> ListExtensionsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Ingress
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1IngressList>> ListExtensionsV1beta1IngressForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSetList>> ListExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> CreateExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReadExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReplaceExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> PatchExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReadExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReplaceExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> PatchExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DeploymentList>> ListExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> CreateExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReadExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReplaceExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> PatchExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create rollback of a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentRollback
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DeploymentRollback>> CreateExtensionsV1beta1NamespacedDeploymentRollbackWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReadExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReplaceExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> PatchExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Ingress
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1IngressList>> ListExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> CreateExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Ingress
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedIngressWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Ingress
        /// </summary>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReadExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReplaceExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> PatchExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Ingress
        /// </summary>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReadExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReplaceExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> PatchExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicyList>> ListExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> CreateExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1NetworkPolicy body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> ReadExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> ReplaceExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> PatchExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSetList>> ListExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> CreateExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReadExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReplaceExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> PatchExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReadExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReplaceExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> PatchExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicyList>> ListExtensionsV1beta1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicyList>> ListExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> CreateExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1PodSecurityPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionPodSecurityPolicyWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodSecurityPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> ReadExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> ReplaceExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1PodSecurityPolicy body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> PatchExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSetList>> ListExtensionsV1beta1ReplicaSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1DaemonSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Ingress
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1IngressListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDaemonSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Ingress
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedIngressListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Ingress
        /// </summary>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedNetworkPolicyListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedReplicaSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1PodSecurityPolicyListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodSecurityPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1ReplicaSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetNetworkingAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetNetworkingV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicyList>> ListNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> CreateNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapinetworkingv1NetworkPolicy body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkingV1CollectionNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> ReadNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> ReplaceNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapinetworkingv1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> PatchNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicyList>> ListNetworkingV1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkingV1NamespacedNetworkPolicyListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkingV1NetworkPolicyListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetPolicyAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetPolicyV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodDisruptionBudget
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudgetList>> ListPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> CreatePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodDisruptionBudget
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodDisruptionBudget
        /// </summary>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReadPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReplacePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeletePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> PatchPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified PodDisruptionBudget
        /// </summary>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodDisruptionBudget
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudgetList>> ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodSecurityPolicyList>> ListPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodSecurityPolicy>> CreatePolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodSecurityPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeletePolicyV1beta1CollectionPodSecurityPolicyWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodSecurityPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodSecurityPolicy>> ReadPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodSecurityPolicy>> ReplacePolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodSecurityPolicy body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeletePolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodSecurityPolicy>> PatchPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodDisruptionBudget
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1NamespacedPodDisruptionBudgetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodDisruptionBudget
        /// </summary>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodDisruptionBudget
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1PodSecurityPolicyListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodSecurityPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetRbacAuthorizationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetRbacAuthorizationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBindingList>> ListRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> CreateRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> ReadRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> ReplaceRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> PatchRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleList>> ListRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> CreateRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> ReadRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> ReplaceRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> PatchRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBindingList>> ListRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> CreateRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> ReadRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> ReplaceRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> PatchRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleList>> ListRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> CreateRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> ReadRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> ReplaceRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> PatchRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBindingList>> ListRbacAuthorizationV1RoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleList>> ListRbacAuthorizationV1RoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleBindingListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleBindingListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1RoleBindingListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1RoleListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetRbacAuthorizationV1alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRoleBindingList>> ListRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRoleBinding>> CreateRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1alpha1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRoleBinding>> ReadRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRoleBinding>> ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1alpha1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRoleBinding>> PatchRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRoleList>> ListRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRole>> CreateRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1alpha1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1CollectionClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRole>> ReadRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRole>> ReplaceRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1alpha1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1ClusterRole>> PatchRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleBindingList>> ListRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleBinding>> CreateRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1alpha1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleBinding>> ReadRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleBinding>> ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1alpha1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleBinding>> PatchRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleList>> ListRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1Role>> CreateRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1alpha1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1Role>> ReadRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1Role>> ReplaceRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1alpha1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1Role>> PatchRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleBindingList>> ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1alpha1RoleList>> ListRbacAuthorizationV1alpha1RoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1ClusterRoleBindingListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1ClusterRoleListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1NamespacedRoleListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetRbacAuthorizationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBindingList>> ListRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> CreateRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> ReadRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> ReplaceRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> PatchRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleList>> ListRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> CreateRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> ReadRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> ReplaceRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> PatchRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBindingList>> ListRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> CreateRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> ReadRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> PatchRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleList>> ListRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> CreateRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> ReadRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> ReplaceRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> PatchRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBindingList>> ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleList>> ListRbacAuthorizationV1beta1RoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleBindingListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleBindingListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1RoleListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetSchedulingAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetSchedulingV1alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PriorityClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapischedulingv1alpha1PriorityClassList>> ListSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PriorityClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapischedulingv1alpha1PriorityClass>> CreateSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(Iok8sapischedulingv1alpha1PriorityClass body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PriorityClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteSchedulingV1alpha1CollectionPriorityClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PriorityClass
        /// </summary>
        /// <param name='name'>
        /// name of the PriorityClass
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapischedulingv1alpha1PriorityClass>> ReadSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PriorityClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PriorityClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapischedulingv1alpha1PriorityClass>> ReplaceSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(Iok8sapischedulingv1alpha1PriorityClass body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PriorityClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PriorityClass
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PriorityClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PriorityClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapischedulingv1alpha1PriorityClass>> PatchSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PriorityClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSchedulingV1alpha1PriorityClassListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PriorityClass
        /// </summary>
        /// <param name='name'>
        /// name of the PriorityClass
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetSettingsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetSettingsV1alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodPreset
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapisettingsv1alpha1PodPresetList>> ListSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodPreset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapisettingsv1alpha1PodPreset>> CreateSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(Iok8sapisettingsv1alpha1PodPreset body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodPreset
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteSettingsV1alpha1CollectionNamespacedPodPresetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodPreset
        /// </summary>
        /// <param name='name'>
        /// name of the PodPreset
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapisettingsv1alpha1PodPreset>> ReadSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodPreset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodPreset
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapisettingsv1alpha1PodPreset>> ReplaceSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(Iok8sapisettingsv1alpha1PodPreset body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodPreset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodPreset
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodPreset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodPreset
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapisettingsv1alpha1PodPreset>> PatchSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodPreset
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapisettingsv1alpha1PodPresetList>> ListSettingsV1alpha1PodPresetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodPreset
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSettingsV1alpha1NamespacedPodPresetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodPreset
        /// </summary>
        /// <param name='name'>
        /// name of the PodPreset
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodPreset
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSettingsV1alpha1PodPresetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetStorageAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetStorageV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClassList>> ListStorageV1StorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> CreateStorageV1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1StorageClass body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1CollectionStorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> ReadStorageV1StorageClassWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> ReplaceStorageV1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1StorageClass body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1StorageClassWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> PatchStorageV1StorageClassWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1StorageClassListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1StorageClassWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetStorageV1alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind VolumeAttachment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1alpha1VolumeAttachmentList>> ListStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1alpha1VolumeAttachment>> CreateStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(Iok8sapistoragev1alpha1VolumeAttachment body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of VolumeAttachment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1alpha1CollectionVolumeAttachmentWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified VolumeAttachment
        /// </summary>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1alpha1VolumeAttachment>> ReadStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1alpha1VolumeAttachment>> ReplaceStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(Iok8sapistoragev1alpha1VolumeAttachment body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1alpha1VolumeAttachment>> PatchStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of VolumeAttachment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1alpha1VolumeAttachmentListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind VolumeAttachment
        /// </summary>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetStorageV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClassList>> ListStorageV1beta1StorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> CreateStorageV1beta1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1beta1StorageClass body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1beta1CollectionStorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> ReadStorageV1beta1StorageClassWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> ReplaceStorageV1beta1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1beta1StorageClass body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1beta1StorageClassWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> PatchStorageV1beta1StorageClassWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind VolumeAttachment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1VolumeAttachmentList>> ListStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1VolumeAttachment>> CreateStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(Iok8sapistoragev1beta1VolumeAttachment body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of VolumeAttachment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1beta1CollectionVolumeAttachmentWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified VolumeAttachment
        /// </summary>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1VolumeAttachment>> ReadStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1VolumeAttachment>> ReplaceStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(Iok8sapistoragev1beta1VolumeAttachment body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for the
        /// specified type will be used. Defaults to a per object value if not
        /// specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the dependents
        /// in the background; 'Foreground' - a cascading policy that deletes
        /// all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified VolumeAttachment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1VolumeAttachment>> PatchStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1beta1StorageClassListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1beta1StorageClassWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of VolumeAttachment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1beta1VolumeAttachmentListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind VolumeAttachment
        /// </summary>
        /// <param name='name'>
        /// name of the VolumeAttachment
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results from
        /// the server. Since this value is server defined, clients may only
        /// use the continue value from a previous query result with identical
        /// query parameters (except for the value of continue) and the server
        /// may reject a continue value it does not recognize. If the specified
        /// continue value is no longer valid whether due to expiration
        /// (generally five to fifteen minutes) or a configuration change on
        /// the server the server will respond with a 410 ResourceExpired error
        /// indicating the client must restart their list without the continue
        /// field. This field is not supported when watch is true. Clients may
        /// start a watch from the last resourceVersion value returned by the
        /// server and not miss any modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same initial
        /// query to retrieve the next set of results. Setting a limit may
        /// return fewer than the requested amount of items (up to zero items)
        /// in the event all requested objects are filtered out and clients
        /// should only use the presence of the continue field to determine
        /// whether more results are available. Servers may choose not to
        /// support the limit argument and will return all of the available
        /// results. If limit is specified and the continue field is empty,
        /// clients may assume that no more results are available. This field
        /// is not supported if watch is true.
        ///
        /// The server guarantees that the objects returned when using continue
        /// will be identical to issuing a single list call without a limit -
        /// that is, no objects created, modified, or deleted after the first
        /// request is issued will be included in any subsequent continued
        /// requests. This is sometimes referred to as a consistent snapshot,
        /// and ensures that a client that is using limit to receive smaller
        /// chunks of a very large result can ensure they see all possible
        /// objects. If objects are updated during a chunked list the version
        /// of the object that was present at the time the first list result
        /// was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from the
        /// beginning of history. When specified for list: - if unset, then the
        /// result is returned from remote storage based on quorum-read flag; -
        /// if it's 0, then we simply return what we currently have in cache,
        /// no guarantee; - if set to non zero, then the result is at least as
        /// fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call. This limits the duration of the
        /// call, regardless of any activity or inactivity.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> LogFileListHandlerWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='logpath'>
        /// path to the log
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> LogFileHandlerWithHttpMessagesAsync(string logpath, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get the code version
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgversionInfo>> GetCodeVersionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
