// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kubeleans.KubernetesApi.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// EventSeries contain information on series of events, i.e. thing that
    /// was/is happening continuously for some time.
    /// </summary>
    public partial class Iok8sapicorev1EventSeries
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1EventSeries class.
        /// </summary>
        public Iok8sapicorev1EventSeries()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1EventSeries class.
        /// </summary>
        /// <param name="count">Number of occurrences in this series up to the
        /// last heartbeat time</param>
        /// <param name="lastObservedTime">Time of the last occurrence
        /// observed</param>
        /// <param name="state">State of this Series: Ongoing or
        /// Finished</param>
        public Iok8sapicorev1EventSeries(int? count = default(int?), System.DateTimeOffset? lastObservedTime = default(System.DateTimeOffset?), string state = default(string))
        {
            Count = count;
            LastObservedTime = lastObservedTime;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of occurrences in this series up to the last
        /// heartbeat time
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or sets time of the last occurrence observed
        /// </summary>
        [JsonProperty(PropertyName = "lastObservedTime")]
        public System.DateTimeOffset? LastObservedTime { get; set; }

        /// <summary>
        /// Gets or sets state of this Series: Ongoing or Finished
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

    }
}
