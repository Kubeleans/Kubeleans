// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kubeleans.KubernetesApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// NodeCondition contains condition information for a node.
    /// </summary>
    public partial class Iok8sapicorev1NodeCondition
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1NodeCondition
        /// class.
        /// </summary>
        public Iok8sapicorev1NodeCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1NodeCondition
        /// class.
        /// </summary>
        /// <param name="status">Status of the condition, one of True, False,
        /// Unknown.</param>
        /// <param name="type">Type of node condition.</param>
        /// <param name="lastHeartbeatTime">Last time we got an update on a
        /// given condition.</param>
        /// <param name="lastTransitionTime">Last time the condition transit
        /// from one status to another.</param>
        /// <param name="message">Human readable message indicating details
        /// about last transition.</param>
        /// <param name="reason">(brief) reason for the condition's last
        /// transition.</param>
        public Iok8sapicorev1NodeCondition(string status, string type, System.DateTimeOffset? lastHeartbeatTime = default(System.DateTimeOffset?), System.DateTimeOffset? lastTransitionTime = default(System.DateTimeOffset?), string message = default(string), string reason = default(string))
        {
            LastHeartbeatTime = lastHeartbeatTime;
            LastTransitionTime = lastTransitionTime;
            Message = message;
            Reason = reason;
            Status = status;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets last time we got an update on a given condition.
        /// </summary>
        [JsonProperty(PropertyName = "lastHeartbeatTime")]
        public System.DateTimeOffset? LastHeartbeatTime { get; set; }

        /// <summary>
        /// Gets or sets last time the condition transit from one status to
        /// another.
        /// </summary>
        [JsonProperty(PropertyName = "lastTransitionTime")]
        public System.DateTimeOffset? LastTransitionTime { get; set; }

        /// <summary>
        /// Gets or sets human readable message indicating details about last
        /// transition.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets (brief) reason for the condition's last transition.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or sets status of the condition, one of True, False, Unknown.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets type of node condition.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
