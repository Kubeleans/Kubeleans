// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kubeleans.KubernetesApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Kubernetes.
    /// </summary>
    public static partial class KubernetesExtensions
    {
            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIVersions> GetCoreAPIVersionsAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoreAPIVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetCoreV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoreV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list objects of kind ComponentStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ComponentStatusList> ListCoreV1ComponentStatusAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1ComponentStatusWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ComponentStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ComponentStatus
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ComponentStatus> ReadCoreV1ComponentStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1ComponentStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ConfigMapList> ListCoreV1ConfigMapForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1ConfigMapForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1EndpointsList> ListCoreV1EndpointsForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1EndpointsForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1EventList> ListCoreV1EventForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1EventForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1LimitRangeList> ListCoreV1LimitRangeForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1LimitRangeForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1NamespaceList> ListCoreV1NamespaceAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespaceWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> CreateCoreV1NamespaceAsync(this IKubernetes operations, Iok8sapicorev1Namespace body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespaceWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Binding> CreateCoreV1NamespacedBindingAsync(this IKubernetes operations, Iok8sapicorev1Binding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedBindingWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ConfigMapList> ListCoreV1NamespacedConfigMapAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ConfigMap> CreateCoreV1NamespacedConfigMapAsync(this IKubernetes operations, Iok8sapicorev1ConfigMap body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedConfigMapWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedConfigMapAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ConfigMap> ReadCoreV1NamespacedConfigMapAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ConfigMap> ReplaceCoreV1NamespacedConfigMapAsync(this IKubernetes operations, Iok8sapicorev1ConfigMap body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedConfigMapAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ConfigMap> PatchCoreV1NamespacedConfigMapAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1EndpointsList> ListCoreV1NamespacedEndpointsAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Endpoints> CreateCoreV1NamespacedEndpointsAsync(this IKubernetes operations, Iok8sapicorev1Endpoints body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedEndpointsWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedEndpointsAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Endpoints> ReadCoreV1NamespacedEndpointsAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Endpoints> ReplaceCoreV1NamespacedEndpointsAsync(this IKubernetes operations, Iok8sapicorev1Endpoints body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedEndpointsAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Endpoints> PatchCoreV1NamespacedEndpointsAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1EventList> ListCoreV1NamespacedEventAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedEventWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Event> CreateCoreV1NamespacedEventAsync(this IKubernetes operations, Iok8sapicorev1Event body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedEventWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedEventAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedEventWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Event> ReadCoreV1NamespacedEventAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedEventWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Event> ReplaceCoreV1NamespacedEventAsync(this IKubernetes operations, Iok8sapicorev1Event body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedEventAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Event> PatchCoreV1NamespacedEventAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1LimitRangeList> ListCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1LimitRange> CreateCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, Iok8sapicorev1LimitRange body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedLimitRangeWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedLimitRangeAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1LimitRange> ReadCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1LimitRange> ReplaceCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, Iok8sapicorev1LimitRange body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1LimitRange> PatchCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaimList> ListCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> CreateCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, Iok8sapicorev1PersistentVolumeClaim body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> ReadCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> ReplaceCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, Iok8sapicorev1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> PatchCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> ReadCoreV1NamespacedPersistentVolumeClaimStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> ReplaceCoreV1NamespacedPersistentVolumeClaimStatusAsync(this IKubernetes operations, Iok8sapicorev1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaim> PatchCoreV1NamespacedPersistentVolumeClaimStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodList> ListCoreV1NamespacedPodAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedPodWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> CreateCoreV1NamespacedPodAsync(this IKubernetes operations, Iok8sapicorev1Pod body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedPodWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedPodAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedPodWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> ReadCoreV1NamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedPodWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> ReplaceCoreV1NamespacedPodAsync(this IKubernetes operations, Iok8sapicorev1Pod body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedPodAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> PatchCoreV1NamespacedPodAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to attach of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container in which to execute the command. Defaults to only container
            /// if there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Stderr if true indicates that stderr is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='stdin'>
            /// Stdin if true, redirects the standard input stream of the pod for this
            /// call. Defaults to false.
            /// </param>
            /// <param name='stdout'>
            /// Stdout if true indicates that stdout is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the attach call.
            /// This is passed through the container runtime so the tty is allocated on the
            /// worker node by the container runtime. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedPodAttachAsync(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to attach of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container in which to execute the command. Defaults to only container
            /// if there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Stderr if true indicates that stderr is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='stdin'>
            /// Stdin if true, redirects the standard input stream of the pod for this
            /// call. Defaults to false.
            /// </param>
            /// <param name='stdout'>
            /// Stdout if true indicates that stdout is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the attach call.
            /// This is passed through the container runtime so the tty is allocated on the
            /// worker node by the container runtime. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedPodAttachAsync(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create binding of a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Binding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Binding> CreateCoreV1NamespacedPodBindingAsync(this IKubernetes operations, Iok8sapicorev1Binding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedPodBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create eviction of a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Eviction
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1Eviction> CreateCoreV1NamespacedPodEvictionAsync(this IKubernetes operations, Iok8sapipolicyv1beta1Eviction body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedPodEvictionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to exec of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='command'>
            /// Command is the remote command to execute. argv array. Not executed within a
            /// shell.
            /// </param>
            /// <param name='container'>
            /// Container in which to execute the command. Defaults to only container if
            /// there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Redirect the standard error stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='stdin'>
            /// Redirect the standard input stream of the pod for this call. Defaults to
            /// false.
            /// </param>
            /// <param name='stdout'>
            /// Redirect the standard output stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the exec call.
            /// Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedPodExecAsync(this IKubernetes operations, string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to exec of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='command'>
            /// Command is the remote command to execute. argv array. Not executed within a
            /// shell.
            /// </param>
            /// <param name='container'>
            /// Container in which to execute the command. Defaults to only container if
            /// there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Redirect the standard error stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='stdin'>
            /// Redirect the standard input stream of the pod for this call. Defaults to
            /// false.
            /// </param>
            /// <param name='stdout'>
            /// Redirect the standard output stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the exec call.
            /// Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedPodExecAsync(this IKubernetes operations, string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read log of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container for which to stream logs. Defaults to only container if there
            /// is one container in the pod.
            /// </param>
            /// <param name='follow'>
            /// Follow the log stream of the pod. Defaults to false.
            /// </param>
            /// <param name='limitBytes'>
            /// If set, the number of bytes to read from the server before terminating the
            /// log output. This may not display a complete final line of logging, and may
            /// return slightly more or slightly less than the specified limit.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='previous'>
            /// Return previous terminated container logs. Defaults to false.
            /// </param>
            /// <param name='sinceSeconds'>
            /// A relative time in seconds before the current time from which to show logs.
            /// If this value precedes the time a pod was started, only logs since the pod
            /// start will be returned. If this value is in the future, no logs will be
            /// returned. Only one of sinceSeconds or sinceTime may be specified.
            /// </param>
            /// <param name='tailLines'>
            /// If set, the number of lines from the end of the logs to show. If not
            /// specified, logs are shown from the creation of the container or
            /// sinceSeconds or sinceTime
            /// </param>
            /// <param name='timestamps'>
            /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every
            /// line of log output. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ReadCoreV1NamespacedPodLogAsync(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedPodLogWithHttpMessagesAsync(name, namespaceParameter, container, follow, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to portforward of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='ports'>
            /// List of ports to forward Required when using WebSockets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedPodPortforwardAsync(this IKubernetes operations, string name, string namespaceParameter, int? ports = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to portforward of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='ports'>
            /// List of ports to forward Required when using WebSockets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedPodPortforwardAsync(this IKubernetes operations, string name, string namespaceParameter, int? ports = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PutNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PutNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1DeleteNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1DeleteNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1HeadNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1HeadNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PATCH requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PatchNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PatchNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PutNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PutNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1DeleteNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1DeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1HeadNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1HeadNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PATCH requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PatchNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PatchNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> ReadCoreV1NamespacedPodStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedPodStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> ReplaceCoreV1NamespacedPodStatusAsync(this IKubernetes operations, Iok8sapicorev1Pod body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Pod> PatchCoreV1NamespacedPodStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodTemplateList> ListCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodTemplate> CreateCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, Iok8sapicorev1PodTemplate body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedPodTemplateWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedPodTemplateAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodTemplate> ReadCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodTemplate> ReplaceCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, Iok8sapicorev1PodTemplate body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodTemplate> PatchCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationControllerList> ListCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> CreateCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, Iok8sapicorev1ReplicationController body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedReplicationControllerAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> ReadCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> ReplaceCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, Iok8sapicorev1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> PatchCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReadCoreV1NamespacedReplicationControllerScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReplaceCoreV1NamespacedReplicationControllerScaleAsync(this IKubernetes operations, Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> PatchCoreV1NamespacedReplicationControllerScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> ReadCoreV1NamespacedReplicationControllerStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> ReplaceCoreV1NamespacedReplicationControllerStatusAsync(this IKubernetes operations, Iok8sapicorev1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationController> PatchCoreV1NamespacedReplicationControllerStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuotaList> ListCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> CreateCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, Iok8sapicorev1ResourceQuota body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedResourceQuotaAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> ReadCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> ReplaceCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, Iok8sapicorev1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> PatchCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> ReadCoreV1NamespacedResourceQuotaStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> ReplaceCoreV1NamespacedResourceQuotaStatusAsync(this IKubernetes operations, Iok8sapicorev1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuota> PatchCoreV1NamespacedResourceQuotaStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1SecretList> ListCoreV1NamespacedSecretAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedSecretWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Secret> CreateCoreV1NamespacedSecretAsync(this IKubernetes operations, Iok8sapicorev1Secret body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedSecretWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedSecretAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedSecretWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Secret> ReadCoreV1NamespacedSecretAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Secret> ReplaceCoreV1NamespacedSecretAsync(this IKubernetes operations, Iok8sapicorev1Secret body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedSecretAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Secret> PatchCoreV1NamespacedSecretAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceAccountList> ListCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceAccount> CreateCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, Iok8sapicorev1ServiceAccount body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedServiceAccountWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNamespacedServiceAccountAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceAccount> ReadCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceAccount> ReplaceCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, Iok8sapicorev1ServiceAccount body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceAccount> PatchCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceList> ListCoreV1NamespacedServiceAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NamespacedServiceWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> CreateCoreV1NamespacedServiceAsync(this IKubernetes operations, Iok8sapicorev1Service body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NamespacedServiceWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> ReadCoreV1NamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> ReplaceCoreV1NamespacedServiceAsync(this IKubernetes operations, Iok8sapicorev1Service body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespacedServiceAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> PatchCoreV1NamespacedServiceAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PutNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PutNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1DeleteNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1DeleteNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1HeadNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1HeadNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PATCH requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PatchNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PatchNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PutNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PutNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1DeleteNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1DeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1HeadNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1HeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PATCH requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PatchNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> ReadCoreV1NamespacedServiceStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespacedServiceStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> ReplaceCoreV1NamespacedServiceStatusAsync(this IKubernetes operations, Iok8sapicorev1Service body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Service> PatchCoreV1NamespacedServiceStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> ReadCoreV1NamespaceAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespaceWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> ReplaceCoreV1NamespaceAsync(this IKubernetes operations, Iok8sapicorev1Namespace body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespaceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NamespaceAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NamespaceWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> PatchCoreV1NamespaceAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespaceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace finalize of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> ReplaceCoreV1NamespaceFinalizeAsync(this IKubernetes operations, Iok8sapicorev1Namespace body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespaceFinalizeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> ReadCoreV1NamespaceStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NamespaceStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> ReplaceCoreV1NamespaceStatusAsync(this IKubernetes operations, Iok8sapicorev1Namespace body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NamespaceStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Namespace> PatchCoreV1NamespaceStatusAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NamespaceStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1NodeList> ListCoreV1NodeAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1NodeWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> CreateCoreV1NodeAsync(this IKubernetes operations, Iok8sapicorev1Node body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1NodeWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionNodeAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionNodeWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> ReadCoreV1NodeAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NodeWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> ReplaceCoreV1NodeAsync(this IKubernetes operations, Iok8sapicorev1Node body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NodeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1NodeAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1NodeWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> PatchCoreV1NodeAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NodeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PutNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PutNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1DeleteNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1DeleteNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1HeadNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1HeadNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PATCH requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PatchNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PatchNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1GetNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1GetNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PutNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PutNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PostNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PostNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1DeleteNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1DeleteNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1HeadNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1HeadNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PATCH requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectCoreV1PatchNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectCoreV1PatchNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> ReadCoreV1NodeStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1NodeStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> ReplaceCoreV1NodeStatusAsync(this IKubernetes operations, Iok8sapicorev1Node body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1NodeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1Node> PatchCoreV1NodeStatusAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1NodeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeClaimList> ListCoreV1PersistentVolumeClaimForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1PersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolumeList> ListCoreV1PersistentVolumeAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1PersistentVolumeWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> CreateCoreV1PersistentVolumeAsync(this IKubernetes operations, Iok8sapicorev1PersistentVolume body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCoreV1PersistentVolumeWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1CollectionPersistentVolumeAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1CollectionPersistentVolumeWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> ReadCoreV1PersistentVolumeAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1PersistentVolumeWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> ReplaceCoreV1PersistentVolumeAsync(this IKubernetes operations, Iok8sapicorev1PersistentVolume body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1PersistentVolumeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCoreV1PersistentVolumeAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCoreV1PersistentVolumeWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> PatchCoreV1PersistentVolumeAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1PersistentVolumeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> ReadCoreV1PersistentVolumeStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCoreV1PersistentVolumeStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> ReplaceCoreV1PersistentVolumeStatusAsync(this IKubernetes operations, Iok8sapicorev1PersistentVolume body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCoreV1PersistentVolumeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PersistentVolume> PatchCoreV1PersistentVolumeStatusAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCoreV1PersistentVolumeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodList> ListCoreV1PodForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1PodForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1PodTemplateList> ListCoreV1PodTemplateForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1PodTemplateForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ReplicationControllerList> ListCoreV1ReplicationControllerForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1ReplicationControllerForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ResourceQuotaList> ListCoreV1ResourceQuotaForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1ResourceQuotaForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1SecretList> ListCoreV1SecretForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1SecretForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceAccountList> ListCoreV1ServiceAccountForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1ServiceAccountForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicorev1ServiceList> ListCoreV1ServiceForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCoreV1ServiceForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1ConfigMapListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1ConfigMapListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1EndpointsListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1EndpointsListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1EventListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1EventListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1LimitRangeListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1LimitRangeListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespaceListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespaceListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedConfigMapListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedConfigMapListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedConfigMapAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedEndpointsListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedEndpointsListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedEndpointsAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedEventListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedEventListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedEventAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedEventWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedLimitRangeListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedLimitRangeListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedLimitRangeAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedPersistentVolumeClaimListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedPersistentVolumeClaimListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedPodListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedPodListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedPodWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedPodTemplateListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedPodTemplateListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedPodTemplateAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedReplicationControllerListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedReplicationControllerListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedReplicationControllerAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedResourceQuotaListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedResourceQuotaListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedResourceQuotaAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedSecretListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedSecretListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedSecretAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedServiceAccountListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedServiceAccountListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedServiceAccountAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedServiceListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedServiceListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NamespaceAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NamespaceWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NodeListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NodeListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1NodeAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1NodeWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1PersistentVolumeClaimListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1PersistentVolumeClaimListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1PersistentVolumeListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1PersistentVolumeListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1PersistentVolumeAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1PersistentVolumeWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1PodListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1PodListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1PodTemplateListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1PodTemplateListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1ReplicationControllerListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1ReplicationControllerListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1ResourceQuotaListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1ResourceQuotaListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1SecretListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1SecretListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1ServiceAccountListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1ServiceAccountListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCoreV1ServiceListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCoreV1ServiceListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroupList> GetAPIVersionsAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetAdmissionregistrationAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdmissionregistrationAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAdmissionregistrationV1alpha1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdmissionregistrationV1alpha1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1alpha1InitializerConfigurationList> ListAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration> CreateAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAdmissionregistrationV1alpha1CollectionInitializerConfigurationAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdmissionregistrationV1alpha1CollectionInitializerConfigurationWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the InitializerConfiguration
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration> ReadAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the InitializerConfiguration
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration> ReplaceAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the InitializerConfiguration
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the InitializerConfiguration
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1alpha1InitializerConfiguration> PatchAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAdmissionregistrationV1alpha1InitializerConfigurationListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAdmissionregistrationV1alpha1InitializerConfigurationListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind InitializerConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the InitializerConfiguration
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAdmissionregistrationV1alpha1InitializerConfigurationAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAdmissionregistrationV1alpha1InitializerConfigurationWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAdmissionregistrationV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdmissionregistrationV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfigurationList> ListAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration> CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the MutatingWebhookConfiguration
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration> ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the MutatingWebhookConfiguration
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration> ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the MutatingWebhookConfiguration
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the MutatingWebhookConfiguration
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration> PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfigurationList> ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration> CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ValidatingWebhookConfiguration
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration> ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ValidatingWebhookConfiguration
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration> ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ValidatingWebhookConfiguration
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ValidatingWebhookConfiguration
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration> PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind MutatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the MutatingWebhookConfiguration
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ValidatingWebhookConfiguration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ValidatingWebhookConfiguration
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetApiextensionsAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiextensionsAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetApiextensionsV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiextensionsV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinitionList> ListApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition> CreateApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CustomResourceDefinition
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition> ReadApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CustomResourceDefinition
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition> ReplaceApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CustomResourceDefinition
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CustomResourceDefinition
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition> PatchApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CustomResourceDefinition
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition> ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusAsync(this IKubernetes operations, Iok8sapiextensionsApiserverpkgapisapiextensionsv1beta1CustomResourceDefinition body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchApiextensionsV1beta1CustomResourceDefinitionListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchApiextensionsV1beta1CustomResourceDefinitionListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind CustomResourceDefinition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CustomResourceDefinition
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchApiextensionsV1beta1CustomResourceDefinitionAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchApiextensionsV1beta1CustomResourceDefinitionWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetApiregistrationAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiregistrationAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetApiregistrationV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiregistrationV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList> ListApiregistrationV1APIServiceAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApiregistrationV1APIServiceWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1APIService> CreateApiregistrationV1APIServiceAsync(this IKubernetes operations, Iok8skubeAggregatorpkgapisapiregistrationv1APIService body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApiregistrationV1APIServiceWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteApiregistrationV1CollectionAPIServiceAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiregistrationV1CollectionAPIServiceWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1APIService> ReadApiregistrationV1APIServiceAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadApiregistrationV1APIServiceWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1APIService> ReplaceApiregistrationV1APIServiceAsync(this IKubernetes operations, Iok8skubeAggregatorpkgapisapiregistrationv1APIService body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceApiregistrationV1APIServiceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteApiregistrationV1APIServiceAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiregistrationV1APIServiceWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1APIService> PatchApiregistrationV1APIServiceAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchApiregistrationV1APIServiceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1APIService> ReplaceApiregistrationV1APIServiceStatusAsync(this IKubernetes operations, Iok8skubeAggregatorpkgapisapiregistrationv1APIService body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceApiregistrationV1APIServiceStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchApiregistrationV1APIServiceListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchApiregistrationV1APIServiceListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchApiregistrationV1APIServiceAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchApiregistrationV1APIServiceWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetApiregistrationV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiregistrationV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList> ListApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApiregistrationV1beta1APIServiceWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService> CreateApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApiregistrationV1beta1APIServiceWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteApiregistrationV1beta1CollectionAPIServiceAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiregistrationV1beta1CollectionAPIServiceWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService> ReadApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadApiregistrationV1beta1APIServiceWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService> ReplaceApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceApiregistrationV1beta1APIServiceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApiregistrationV1beta1APIServiceWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService> PatchApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchApiregistrationV1beta1APIServiceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService> ReplaceApiregistrationV1beta1APIServiceStatusAsync(this IKubernetes operations, Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceApiregistrationV1beta1APIServiceStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchApiregistrationV1beta1APIServiceListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchApiregistrationV1beta1APIServiceListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind APIService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the APIService
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchApiregistrationV1beta1APIServiceAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchApiregistrationV1beta1APIServiceWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetAppsAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAppsV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ControllerRevisionList> ListAppsV1ControllerRevisionForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSetList> ListAppsV1DaemonSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1DaemonSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DeploymentList> ListAppsV1DeploymentForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1DeploymentForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ControllerRevisionList> ListAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ControllerRevision> CreateAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapiappsv1ControllerRevision body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1CollectionNamespacedControllerRevisionAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1CollectionNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ControllerRevision> ReadAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ControllerRevision> ReplaceAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapiappsv1ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ControllerRevision> PatchAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSetList> ListAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1NamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> CreateAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapiappsv1DaemonSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1NamespacedDaemonSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1CollectionNamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1CollectionNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> ReadAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> ReplaceAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapiappsv1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> PatchAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> ReadAppsV1NamespacedDaemonSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> ReplaceAppsV1NamespacedDaemonSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DaemonSet> PatchAppsV1NamespacedDaemonSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1DeploymentList> ListAppsV1NamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1NamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> CreateAppsV1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiappsv1Deployment body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1NamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1CollectionNamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1CollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> ReadAppsV1NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> ReplaceAppsV1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiappsv1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> PatchAppsV1NamespacedDeploymentAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReadAppsV1NamespacedDeploymentScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReplaceAppsV1NamespacedDeploymentScaleAsync(this IKubernetes operations, Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> PatchAppsV1NamespacedDeploymentScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> ReadAppsV1NamespacedDeploymentStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> ReplaceAppsV1NamespacedDeploymentStatusAsync(this IKubernetes operations, Iok8sapiappsv1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1Deployment> PatchAppsV1NamespacedDeploymentStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSetList> ListAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1NamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> CreateAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapiappsv1ReplicaSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1NamespacedReplicaSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1CollectionNamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1CollectionNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> ReadAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> ReplaceAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapiappsv1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> PatchAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReadAppsV1NamespacedReplicaSetScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReplaceAppsV1NamespacedReplicaSetScaleAsync(this IKubernetes operations, Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> PatchAppsV1NamespacedReplicaSetScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> ReadAppsV1NamespacedReplicaSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> ReplaceAppsV1NamespacedReplicaSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSet> PatchAppsV1NamespacedReplicaSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSetList> ListAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1NamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> CreateAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapiappsv1StatefulSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1NamespacedStatefulSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1CollectionNamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1CollectionNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> ReadAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> ReplaceAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapiappsv1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> PatchAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReadAppsV1NamespacedStatefulSetScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> ReplaceAppsV1NamespacedStatefulSetScaleAsync(this IKubernetes operations, Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1Scale> PatchAppsV1NamespacedStatefulSetScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> ReadAppsV1NamespacedStatefulSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> ReplaceAppsV1NamespacedStatefulSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSet> PatchAppsV1NamespacedStatefulSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1ReplicaSetList> ListAppsV1ReplicaSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1ReplicaSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1StatefulSetList> ListAppsV1StatefulSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1StatefulSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1ControllerRevisionListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1DaemonSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1DaemonSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1DeploymentListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1DeploymentListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedControllerRevisionListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedControllerRevisionListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedControllerRevisionAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedDaemonSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedDaemonSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedDeploymentListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedDeploymentListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedReplicaSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedReplicaSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedStatefulSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedStatefulSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1NamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1NamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1ReplicaSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1ReplicaSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1StatefulSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1StatefulSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAppsV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1ControllerRevisionList> ListAppsV1beta1ControllerRevisionForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1DeploymentList> ListAppsV1beta1DeploymentForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1ControllerRevisionList> ListAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1ControllerRevision> CreateAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapiappsv1beta1ControllerRevision body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta1CollectionNamespacedControllerRevisionAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta1CollectionNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1ControllerRevision> ReadAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1ControllerRevision> ReplaceAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapiappsv1beta1ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1ControllerRevision> PatchAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1DeploymentList> ListAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> CreateAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiappsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta1CollectionNamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta1CollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> ReadAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> ReplaceAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiappsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> PatchAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create rollback of a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DeploymentRollback
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1DeploymentRollback> CreateAppsV1beta1NamespacedDeploymentRollbackAsync(this IKubernetes operations, Iok8sapiappsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta1NamespacedDeploymentRollbackWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Scale> ReadAppsV1beta1NamespacedDeploymentScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Scale> ReplaceAppsV1beta1NamespacedDeploymentScaleAsync(this IKubernetes operations, Iok8sapiappsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Scale> PatchAppsV1beta1NamespacedDeploymentScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> ReadAppsV1beta1NamespacedDeploymentStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> ReplaceAppsV1beta1NamespacedDeploymentStatusAsync(this IKubernetes operations, Iok8sapiappsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Deployment> PatchAppsV1beta1NamespacedDeploymentStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSetList> ListAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> CreateAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapiappsv1beta1StatefulSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta1CollectionNamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta1CollectionNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> ReadAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> ReplaceAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapiappsv1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> PatchAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Scale> ReadAppsV1beta1NamespacedStatefulSetScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Scale> ReplaceAppsV1beta1NamespacedStatefulSetScaleAsync(this IKubernetes operations, Iok8sapiappsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1Scale> PatchAppsV1beta1NamespacedStatefulSetScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> ReadAppsV1beta1NamespacedStatefulSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> ReplaceAppsV1beta1NamespacedStatefulSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSet> PatchAppsV1beta1NamespacedStatefulSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta1StatefulSetList> ListAppsV1beta1StatefulSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta1StatefulSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1ControllerRevisionListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1DeploymentListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1DeploymentListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1NamespacedControllerRevisionListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1NamespacedControllerRevisionListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1NamespacedControllerRevisionAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1NamespacedDeploymentListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1NamespacedDeploymentListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1NamespacedStatefulSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1NamespacedStatefulSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1NamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta1StatefulSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta1StatefulSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAppsV1beta2APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsV1beta2APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ControllerRevisionList> ListAppsV1beta2ControllerRevisionForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2ControllerRevisionForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSetList> ListAppsV1beta2DaemonSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2DaemonSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DeploymentList> ListAppsV1beta2DeploymentForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2DeploymentForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ControllerRevisionList> ListAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ControllerRevision> CreateAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapiappsv1beta2ControllerRevision body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2CollectionNamespacedControllerRevisionAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2CollectionNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ControllerRevision> ReadAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ControllerRevision> ReplaceAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapiappsv1beta2ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ControllerRevision> PatchAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSetList> ListAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> CreateAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapiappsv1beta2DaemonSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2CollectionNamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2CollectionNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> ReadAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> ReplaceAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapiappsv1beta2DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> PatchAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> ReadAppsV1beta2NamespacedDaemonSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> ReplaceAppsV1beta2NamespacedDaemonSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1beta2DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DaemonSet> PatchAppsV1beta2NamespacedDaemonSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2DeploymentList> ListAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> CreateAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiappsv1beta2Deployment body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2CollectionNamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2CollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> ReadAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> ReplaceAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiappsv1beta2Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> PatchAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> ReadAppsV1beta2NamespacedDeploymentScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> ReplaceAppsV1beta2NamespacedDeploymentScaleAsync(this IKubernetes operations, Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> PatchAppsV1beta2NamespacedDeploymentScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> ReadAppsV1beta2NamespacedDeploymentStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> ReplaceAppsV1beta2NamespacedDeploymentStatusAsync(this IKubernetes operations, Iok8sapiappsv1beta2Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Deployment> PatchAppsV1beta2NamespacedDeploymentStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSetList> ListAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> CreateAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapiappsv1beta2ReplicaSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2CollectionNamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2CollectionNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> ReadAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> ReplaceAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapiappsv1beta2ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> PatchAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> ReadAppsV1beta2NamespacedReplicaSetScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> ReplaceAppsV1beta2NamespacedReplicaSetScaleAsync(this IKubernetes operations, Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> PatchAppsV1beta2NamespacedReplicaSetScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> ReadAppsV1beta2NamespacedReplicaSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> ReplaceAppsV1beta2NamespacedReplicaSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1beta2ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSet> PatchAppsV1beta2NamespacedReplicaSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSetList> ListAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> CreateAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapiappsv1beta2StatefulSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2CollectionNamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2CollectionNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> ReadAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> ReplaceAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapiappsv1beta2StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> PatchAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> ReadAppsV1beta2NamespacedStatefulSetScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> ReplaceAppsV1beta2NamespacedStatefulSetScaleAsync(this IKubernetes operations, Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2Scale> PatchAppsV1beta2NamespacedStatefulSetScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> ReadAppsV1beta2NamespacedStatefulSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> ReplaceAppsV1beta2NamespacedStatefulSetStatusAsync(this IKubernetes operations, Iok8sapiappsv1beta2StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSet> PatchAppsV1beta2NamespacedStatefulSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2ReplicaSetList> ListAppsV1beta2ReplicaSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2ReplicaSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiappsv1beta2StatefulSetList> ListAppsV1beta2StatefulSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsV1beta2StatefulSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2ControllerRevisionListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2DaemonSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2DaemonSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2DeploymentListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2DeploymentListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedControllerRevisionListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedControllerRevisionListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ControllerRevision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ControllerRevision
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedControllerRevisionAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedDaemonSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedDaemonSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedDeploymentListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedDeploymentListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedReplicaSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedReplicaSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedStatefulSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedStatefulSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2NamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2ReplicaSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2ReplicaSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAppsV1beta2StatefulSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAppsV1beta2StatefulSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetAuthenticationAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthenticationAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAuthenticationV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthenticationV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a TokenReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthenticationv1TokenReview> CreateAuthenticationV1TokenReviewAsync(this IKubernetes operations, Iok8sapiauthenticationv1TokenReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthenticationV1TokenReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAuthenticationV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthenticationV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a TokenReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthenticationv1beta1TokenReview> CreateAuthenticationV1beta1TokenReviewAsync(this IKubernetes operations, Iok8sapiauthenticationv1beta1TokenReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthenticationV1beta1TokenReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetAuthorizationAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorizationAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAuthorizationV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorizationV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a LocalSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1LocalSubjectAccessReview> CreateAuthorizationV1NamespacedLocalSubjectAccessReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SelfSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1SelfSubjectAccessReview> CreateAuthorizationV1SelfSubjectAccessReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1SelfSubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1SelfSubjectAccessReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SelfSubjectRulesReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1SelfSubjectRulesReview> CreateAuthorizationV1SelfSubjectRulesReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1SelfSubjectRulesReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1SelfSubjectRulesReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1SubjectAccessReview> CreateAuthorizationV1SubjectAccessReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1SubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1SubjectAccessReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAuthorizationV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorizationV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a LocalSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1beta1LocalSubjectAccessReview> CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1beta1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SelfSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1beta1SelfSubjectAccessReview> CreateAuthorizationV1beta1SelfSubjectAccessReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1beta1SelfSubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1beta1SelfSubjectAccessReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SelfSubjectRulesReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1beta1SelfSubjectRulesReview> CreateAuthorizationV1beta1SelfSubjectRulesReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1beta1SelfSubjectRulesReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1beta1SelfSubjectRulesReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiauthorizationv1beta1SubjectAccessReview> CreateAuthorizationV1beta1SubjectAccessReviewAsync(this IKubernetes operations, Iok8sapiauthorizationv1beta1SubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAuthorizationV1beta1SubjectAccessReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetAutoscalingAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAutoscalingAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAutoscalingV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAutoscalingV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscalerList> ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscalerList> ListAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> CreateAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> ReadAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> PatchAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv1HorizontalPodAutoscaler> PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAutoscalingV1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetAutoscalingV2beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAutoscalingV2beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerList> ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerList> ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler> PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetBatchAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBatchAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetBatchV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBatchV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1JobList> ListBatchV1JobForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBatchV1JobForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1JobList> ListBatchV1NamespacedJobAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBatchV1NamespacedJobWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> CreateBatchV1NamespacedJobAsync(this IKubernetes operations, Iok8sapibatchv1Job body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBatchV1NamespacedJobWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteBatchV1CollectionNamespacedJobAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBatchV1CollectionNamespacedJobWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> ReadBatchV1NamespacedJobAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadBatchV1NamespacedJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> ReplaceBatchV1NamespacedJobAsync(this IKubernetes operations, Iok8sapibatchv1Job body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBatchV1NamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteBatchV1NamespacedJobAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBatchV1NamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> PatchBatchV1NamespacedJobAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBatchV1NamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> ReadBatchV1NamespacedJobStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadBatchV1NamespacedJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> ReplaceBatchV1NamespacedJobStatusAsync(this IKubernetes operations, Iok8sapibatchv1Job body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBatchV1NamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1Job> PatchBatchV1NamespacedJobStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBatchV1NamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV1JobListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV1JobListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV1NamespacedJobListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV1NamespacedJobListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV1NamespacedJobAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV1NamespacedJobWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetBatchV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBatchV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJobList> ListBatchV1beta1CronJobForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBatchV1beta1CronJobForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJobList> ListBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> CreateBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, Iok8sapibatchv1beta1CronJob body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteBatchV1beta1CollectionNamespacedCronJobAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBatchV1beta1CollectionNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> ReadBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> ReplaceBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, Iok8sapibatchv1beta1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> PatchBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> ReadBatchV1beta1NamespacedCronJobStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> ReplaceBatchV1beta1NamespacedCronJobStatusAsync(this IKubernetes operations, Iok8sapibatchv1beta1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv1beta1CronJob> PatchBatchV1beta1NamespacedCronJobStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV1beta1CronJobListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV1beta1CronJobListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV1beta1NamespacedCronJobListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV1beta1NamespacedCronJobListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV1beta1NamespacedCronJobAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetBatchV2alpha1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBatchV2alpha1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJobList> ListBatchV2alpha1CronJobForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBatchV2alpha1CronJobForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJobList> ListBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> CreateBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, Iok8sapibatchv2alpha1CronJob body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteBatchV2alpha1CollectionNamespacedCronJobAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBatchV2alpha1CollectionNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> ReadBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> ReplaceBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, Iok8sapibatchv2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> PatchBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> ReadBatchV2alpha1NamespacedCronJobStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> ReplaceBatchV2alpha1NamespacedCronJobStatusAsync(this IKubernetes operations, Iok8sapibatchv2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapibatchv2alpha1CronJob> PatchBatchV2alpha1NamespacedCronJobStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV2alpha1CronJobListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV2alpha1CronJobListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV2alpha1NamespacedCronJobListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV2alpha1NamespacedCronJobListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchBatchV2alpha1NamespacedCronJobAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetCertificatesAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetCertificatesV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequestList> ListCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequest> CreateCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, Iok8sapicertificatesv1beta1CertificateSigningRequest body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCertificatesV1beta1CollectionCertificateSigningRequestAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificatesV1beta1CollectionCertificateSigningRequestWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequest> ReadCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequest> ReplaceCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequest> PatchCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace approval of the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequest> ReplaceCertificatesV1beta1CertificateSigningRequestApprovalAsync(this IKubernetes operations, Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapicertificatesv1beta1CertificateSigningRequest> ReplaceCertificatesV1beta1CertificateSigningRequestStatusAsync(this IKubernetes operations, Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCertificatesV1beta1CertificateSigningRequestStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCertificatesV1beta1CertificateSigningRequestListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCertificatesV1beta1CertificateSigningRequestListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchCertificatesV1beta1CertificateSigningRequestAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetEventsAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetEventsV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapieventsv1beta1EventList> ListEventsV1beta1EventForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventsV1beta1EventForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapieventsv1beta1EventList> ListEventsV1beta1NamespacedEventAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventsV1beta1NamespacedEventWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapieventsv1beta1Event> CreateEventsV1beta1NamespacedEventAsync(this IKubernetes operations, Iok8sapieventsv1beta1Event body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventsV1beta1NamespacedEventWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteEventsV1beta1CollectionNamespacedEventAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEventsV1beta1CollectionNamespacedEventWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapieventsv1beta1Event> ReadEventsV1beta1NamespacedEventAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadEventsV1beta1NamespacedEventWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapieventsv1beta1Event> ReplaceEventsV1beta1NamespacedEventAsync(this IKubernetes operations, Iok8sapieventsv1beta1Event body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceEventsV1beta1NamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteEventsV1beta1NamespacedEventAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEventsV1beta1NamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapieventsv1beta1Event> PatchEventsV1beta1NamespacedEventAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchEventsV1beta1NamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchEventsV1beta1EventListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchEventsV1beta1EventListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchEventsV1beta1NamespacedEventListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchEventsV1beta1NamespacedEventListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchEventsV1beta1NamespacedEventAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchEventsV1beta1NamespacedEventWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetExtensionsAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionsAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetExtensionsV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionsV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSetList> ListExtensionsV1beta1DaemonSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1DaemonSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DeploymentList> ListExtensionsV1beta1DeploymentForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1IngressList> ListExtensionsV1beta1IngressForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1IngressForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSetList> ListExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> CreateExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1DaemonSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1CollectionNamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1CollectionNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> ReadExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> ReplaceExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> PatchExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> ReadExtensionsV1beta1NamespacedDaemonSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> ReplaceExtensionsV1beta1NamespacedDaemonSetStatusAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DaemonSet> PatchExtensionsV1beta1NamespacedDaemonSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DeploymentList> ListExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> CreateExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1CollectionNamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1CollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> ReadExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> ReplaceExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> PatchExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create rollback of a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DeploymentRollback
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1DeploymentRollback> CreateExtensionsV1beta1NamespacedDeploymentRollbackAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1NamespacedDeploymentRollbackWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> ReadExtensionsV1beta1NamespacedDeploymentScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> ReplaceExtensionsV1beta1NamespacedDeploymentScaleAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> PatchExtensionsV1beta1NamespacedDeploymentScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> ReadExtensionsV1beta1NamespacedDeploymentStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> ReplaceExtensionsV1beta1NamespacedDeploymentStatusAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Deployment> PatchExtensionsV1beta1NamespacedDeploymentStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1IngressList> ListExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> CreateExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Ingress body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1CollectionNamespacedIngressAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1CollectionNamespacedIngressWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> ReadExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> ReplaceExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> PatchExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> ReadExtensionsV1beta1NamespacedIngressStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> ReplaceExtensionsV1beta1NamespacedIngressStatusAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Ingress> PatchExtensionsV1beta1NamespacedIngressStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1NetworkPolicyList> ListExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1NetworkPolicy> CreateExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1NetworkPolicy body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1NetworkPolicy> ReadExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1NetworkPolicy> ReplaceExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1NetworkPolicy> PatchExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSetList> ListExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> CreateExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1ReplicaSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1CollectionNamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1CollectionNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> ReadExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> ReplaceExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> PatchExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> ReadExtensionsV1beta1NamespacedReplicaSetScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> ReplaceExtensionsV1beta1NamespacedReplicaSetScaleAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> PatchExtensionsV1beta1NamespacedReplicaSetScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> ReadExtensionsV1beta1NamespacedReplicaSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> ReplaceExtensionsV1beta1NamespacedReplicaSetStatusAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSet> PatchExtensionsV1beta1NamespacedReplicaSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified ReplicationControllerDummy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified ReplicationControllerDummy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified ReplicationControllerDummy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1Scale> PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1NetworkPolicyList> ListExtensionsV1beta1NetworkPolicyForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1PodSecurityPolicyList> ListExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1PodSecurityPolicy> CreateExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1PodSecurityPolicy body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1CollectionPodSecurityPolicyAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1CollectionPodSecurityPolicyWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1PodSecurityPolicy> ReadExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1PodSecurityPolicy> ReplaceExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, Iok8sapiextensionsv1beta1PodSecurityPolicy body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1PodSecurityPolicy> PatchExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapiextensionsv1beta1ReplicaSetList> ListExtensionsV1beta1ReplicaSetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExtensionsV1beta1ReplicaSetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1DaemonSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1DaemonSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1DeploymentListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1DeploymentListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1IngressListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1IngressListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedDaemonSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedDaemonSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedDeploymentListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedDeploymentListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedIngressListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedIngressListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedIngressAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedNetworkPolicyListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedNetworkPolicyListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedNetworkPolicyAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedReplicaSetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedReplicaSetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1PodSecurityPolicyListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1PodSecurityPolicyListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1PodSecurityPolicyAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchExtensionsV1beta1ReplicaSetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchExtensionsV1beta1ReplicaSetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetNetworkingAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkingAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetNetworkingV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkingV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapinetworkingv1NetworkPolicyList> ListNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapinetworkingv1NetworkPolicy> CreateNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, Iok8sapinetworkingv1NetworkPolicy body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteNetworkingV1CollectionNamespacedNetworkPolicyAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNetworkingV1CollectionNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapinetworkingv1NetworkPolicy> ReadNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapinetworkingv1NetworkPolicy> ReplaceNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, Iok8sapinetworkingv1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapinetworkingv1NetworkPolicy> PatchNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapinetworkingv1NetworkPolicyList> ListNetworkingV1NetworkPolicyForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkingV1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchNetworkingV1NamespacedNetworkPolicyListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchNetworkingV1NamespacedNetworkPolicyListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchNetworkingV1NamespacedNetworkPolicyAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchNetworkingV1NetworkPolicyListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchNetworkingV1NetworkPolicyListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetPolicyAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPolicyAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetPolicyV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPolicyV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudgetList> ListPolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> CreatePolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, Iok8sapipolicyv1beta1PodDisruptionBudget body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> ReadPolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> ReplacePolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, Iok8sapipolicyv1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeletePolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> PatchPolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusAsync(this IKubernetes operations, Iok8sapipolicyv1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudget> PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodDisruptionBudgetList> ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodSecurityPolicyList> ListPolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodSecurityPolicy> CreatePolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, Iok8sapipolicyv1beta1PodSecurityPolicy body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeletePolicyV1beta1CollectionPodSecurityPolicyAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePolicyV1beta1CollectionPodSecurityPolicyWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodSecurityPolicy> ReadPolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodSecurityPolicy> ReplacePolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, Iok8sapipolicyv1beta1PodSecurityPolicy body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeletePolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapipolicyv1beta1PodSecurityPolicy> PatchPolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchPolicyV1beta1NamespacedPodDisruptionBudgetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchPolicyV1beta1NamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchPolicyV1beta1PodSecurityPolicyListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchPolicyV1beta1PodSecurityPolicyListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchPolicyV1beta1PodSecurityPolicyAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchPolicyV1beta1PodSecurityPolicyWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetRbacAuthorizationAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRbacAuthorizationAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetRbacAuthorizationV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRbacAuthorizationV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRoleBindingList> ListRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRoleBinding> CreateRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1ClusterRoleBinding body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1CollectionClusterRoleBindingAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1CollectionClusterRoleBindingWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRoleBinding> ReadRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRoleBinding> ReplaceRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1ClusterRoleBinding body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRoleBinding> PatchRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRoleList> ListRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRole> CreateRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, Iok8sapirbacv1ClusterRole body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1CollectionClusterRoleAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1CollectionClusterRoleWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRole> ReadRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRole> ReplaceRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, Iok8sapirbacv1ClusterRole body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1ClusterRole> PatchRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleBindingList> ListRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleBinding> CreateRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1RoleBinding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleBinding> ReadRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleBinding> ReplaceRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleBinding> PatchRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleList> ListRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1Role> CreateRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, Iok8sapirbacv1Role body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1CollectionNamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1CollectionNamespacedRoleWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1Role> ReadRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1Role> ReplaceRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, Iok8sapirbacv1Role body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1Role> PatchRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleBindingList> ListRbacAuthorizationV1RoleBindingForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1RoleBindingForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1RoleList> ListRbacAuthorizationV1RoleForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1RoleForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1ClusterRoleBindingListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1ClusterRoleBindingListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1ClusterRoleBindingAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1ClusterRoleListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1ClusterRoleListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1ClusterRoleAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1NamespacedRoleBindingListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1NamespacedRoleBindingListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1NamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1NamespacedRoleListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1NamespacedRoleListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1NamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1RoleBindingListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1RoleListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1RoleListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetRbacAuthorizationV1alpha1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRbacAuthorizationV1alpha1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRoleBindingList> ListRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRoleBinding> CreateRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1alpha1ClusterRoleBinding body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRoleBinding> ReadRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRoleBinding> ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1alpha1ClusterRoleBinding body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRoleBinding> PatchRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRoleList> ListRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRole> CreateRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, Iok8sapirbacv1alpha1ClusterRole body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1CollectionClusterRoleAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRole> ReadRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRole> ReplaceRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, Iok8sapirbacv1alpha1ClusterRole body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1ClusterRole> PatchRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleBindingList> ListRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleBinding> CreateRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1alpha1RoleBinding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleBinding> ReadRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleBinding> ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1alpha1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleBinding> PatchRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleList> ListRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1Role> CreateRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, Iok8sapirbacv1alpha1Role body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1Role> ReadRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1Role> ReplaceRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, Iok8sapirbacv1alpha1Role body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1Role> PatchRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleBindingList> ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1alpha1RoleList> ListRbacAuthorizationV1alpha1RoleForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1alpha1RoleForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1ClusterRoleBindingListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1ClusterRoleBindingListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1ClusterRoleBindingAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1ClusterRoleBindingWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1ClusterRoleListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1ClusterRoleListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1ClusterRoleAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1ClusterRoleWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1NamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1NamespacedRoleListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1NamespacedRoleListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1NamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1NamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetRbacAuthorizationV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRbacAuthorizationV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRoleBindingList> ListRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRoleBinding> CreateRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1beta1ClusterRoleBinding body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRoleBinding> ReadRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRoleBinding> ReplaceRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1beta1ClusterRoleBinding body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRoleBinding> PatchRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRoleList> ListRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRole> CreateRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, Iok8sapirbacv1beta1ClusterRole body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1CollectionClusterRoleAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1CollectionClusterRoleWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRole> ReadRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRole> ReplaceRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, Iok8sapirbacv1beta1ClusterRole body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1ClusterRole> PatchRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleBindingList> ListRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleBinding> CreateRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1beta1RoleBinding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleBinding> ReadRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleBinding> ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapirbacv1beta1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleBinding> PatchRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleList> ListRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1Role> CreateRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, Iok8sapirbacv1beta1Role body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1Role> ReadRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1Role> ReplaceRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, Iok8sapirbacv1beta1Role body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1Role> PatchRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleBindingList> ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapirbacv1beta1RoleList> ListRbacAuthorizationV1beta1RoleForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRbacAuthorizationV1beta1RoleForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1ClusterRoleBindingListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1ClusterRoleBindingListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1ClusterRoleBindingAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1ClusterRoleListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1ClusterRoleListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1ClusterRoleAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1NamespacedRoleBindingListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1NamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1NamespacedRoleListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1NamespacedRoleListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1NamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchRbacAuthorizationV1beta1RoleListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetSchedulingAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchedulingAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetSchedulingV1alpha1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchedulingV1alpha1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapischedulingv1alpha1PriorityClassList> ListSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapischedulingv1alpha1PriorityClass> CreateSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, Iok8sapischedulingv1alpha1PriorityClass body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteSchedulingV1alpha1CollectionPriorityClassAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSchedulingV1alpha1CollectionPriorityClassWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PriorityClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapischedulingv1alpha1PriorityClass> ReadSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PriorityClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapischedulingv1alpha1PriorityClass> ReplaceSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, Iok8sapischedulingv1alpha1PriorityClass body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PriorityClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PriorityClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapischedulingv1alpha1PriorityClass> PatchSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchSchedulingV1alpha1PriorityClassListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchSchedulingV1alpha1PriorityClassListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PriorityClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PriorityClass
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchSchedulingV1alpha1PriorityClassAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchSchedulingV1alpha1PriorityClassWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetSettingsAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSettingsAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetSettingsV1alpha1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSettingsV1alpha1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapisettingsv1alpha1PodPresetList> ListSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapisettingsv1alpha1PodPreset> CreateSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, Iok8sapisettingsv1alpha1PodPreset body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteSettingsV1alpha1CollectionNamespacedPodPresetAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSettingsV1alpha1CollectionNamespacedPodPresetWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapisettingsv1alpha1PodPreset> ReadSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapisettingsv1alpha1PodPreset> ReplaceSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, Iok8sapisettingsv1alpha1PodPreset body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapisettingsv1alpha1PodPreset> PatchSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapisettingsv1alpha1PodPresetList> ListSettingsV1alpha1PodPresetForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSettingsV1alpha1PodPresetForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchSettingsV1alpha1NamespacedPodPresetListAsync(this IKubernetes operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchSettingsV1alpha1NamespacedPodPresetListWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchSettingsV1alpha1NamespacedPodPresetAsync(this IKubernetes operations, string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchSettingsV1alpha1NamespacedPodPresetWithHttpMessagesAsync(name, namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchSettingsV1alpha1PodPresetListForAllNamespacesAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchSettingsV1alpha1PodPresetListForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIGroup> GetStorageAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetStorageV1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageV1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1StorageClassList> ListStorageV1StorageClassAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageV1StorageClassWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1StorageClass> CreateStorageV1StorageClassAsync(this IKubernetes operations, Iok8sapistoragev1StorageClass body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStorageV1StorageClassWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1CollectionStorageClassAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1CollectionStorageClassWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1StorageClass> ReadStorageV1StorageClassAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadStorageV1StorageClassWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1StorageClass> ReplaceStorageV1StorageClassAsync(this IKubernetes operations, Iok8sapistoragev1StorageClass body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceStorageV1StorageClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1StorageClassAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1StorageClassWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1StorageClass> PatchStorageV1StorageClassAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchStorageV1StorageClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1StorageClassListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1StorageClassListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1StorageClassAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1StorageClassWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetStorageV1alpha1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageV1alpha1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1alpha1VolumeAttachmentList> ListStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1alpha1VolumeAttachment> CreateStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, Iok8sapistoragev1alpha1VolumeAttachment body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1alpha1CollectionVolumeAttachmentAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1alpha1CollectionVolumeAttachmentWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1alpha1VolumeAttachment> ReadStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1alpha1VolumeAttachment> ReplaceStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, Iok8sapistoragev1alpha1VolumeAttachment body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1alpha1VolumeAttachment> PatchStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1alpha1VolumeAttachmentListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1alpha1VolumeAttachmentListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1alpha1VolumeAttachmentAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1alpha1VolumeAttachmentWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1APIResourceList> GetStorageV1beta1APIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageV1beta1APIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1StorageClassList> ListStorageV1beta1StorageClassAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageV1beta1StorageClassWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1StorageClass> CreateStorageV1beta1StorageClassAsync(this IKubernetes operations, Iok8sapistoragev1beta1StorageClass body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStorageV1beta1StorageClassWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1beta1CollectionStorageClassAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1beta1CollectionStorageClassWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1StorageClass> ReadStorageV1beta1StorageClassAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadStorageV1beta1StorageClassWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1StorageClass> ReplaceStorageV1beta1StorageClassAsync(this IKubernetes operations, Iok8sapistoragev1beta1StorageClass body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceStorageV1beta1StorageClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1beta1StorageClassAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1beta1StorageClassWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1StorageClass> PatchStorageV1beta1StorageClassAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchStorageV1beta1StorageClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1VolumeAttachmentList> ListStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1VolumeAttachment> CreateStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, Iok8sapistoragev1beta1VolumeAttachment body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1beta1CollectionVolumeAttachmentAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1beta1CollectionVolumeAttachmentWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1VolumeAttachment> ReadStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1VolumeAttachment> ReplaceStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, Iok8sapistoragev1beta1VolumeAttachment body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1Status> DeleteStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapistoragev1beta1VolumeAttachment> PatchStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1beta1StorageClassListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1beta1StorageClassListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1beta1StorageClassAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1beta1StorageClassWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch individual changes to a list of VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1beta1VolumeAttachmentListAsync(this IKubernetes operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1beta1VolumeAttachmentListWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// watch changes to an object of kind VolumeAttachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the VolumeAttachment
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call. This limits the duration of the call,
            /// regardless of any activity or inactivity.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgapismetav1WatchEvent> WatchStorageV1beta1VolumeAttachmentAsync(this IKubernetes operations, string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchStorageV1beta1VolumeAttachmentWithHttpMessagesAsync(name, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LogFileListHandlerAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LogFileListHandlerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='logpath'>
            /// path to the log
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LogFileHandlerAsync(this IKubernetes operations, string logpath, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LogFileHandlerWithHttpMessagesAsync(logpath, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// get the code version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Iok8sapimachinerypkgversionInfo> GetCodeVersionAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCodeVersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
